import asyncio
import logging
import random

from aiogram import types
from aiogram.dispatcher import FSMContext

from data.config import ADMINS
from keyboards.inline.pass_med_test import pass_test, pass_test_callback, options_keyboard, options_keyboard_callback
from loader import dp, bot
from states.fix_state import PassTestMessage
from utils.db_api.quick_commands import select_all_question_options
from aiogram.dispatcher.filters import Command
from utils.misc import rate_limit


@rate_limit(5, "–¢—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—èüèãÔ∏è‚Äç‚ôÄÔ∏è")
@dp.message_handler(Command("test"))
async def pass_med_test(message: types.Message, state: FSMContext):
    await PassTestMessage.ListTest.set()
    test_list = await select_all_question_options()
    user_points = 0
    await state.update_data(test_list=test_list, user_points=user_points)
    await bot.send_chat_action(message.chat.id, types.ChatActions.TYPING)
    # –ß–µ–∫–∞—î–º–æ 1 —Å–µ–∫—É–Ω–¥–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—ñ
    await asyncio.sleep(0.5)
    await message.answer(f'–ü—Ä–æ–ø–æ–Ω—É—î–º–æ –í–∞–º –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è (—Ä—ñ–≤–µ–Ω—å CLS), –∫–æ—Ä—Ç–∫–∏–π —Ç–µ—Å—Ç 30 –∑–∞–ø–∏—Ç–∞–Ω—å',
                         reply_markup=pass_test)
    logging.info(message.from_user.full_name + " -> pressed [–¢—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—èüèãÔ∏è‚Äç‚ôÄ]")


@dp.callback_query_handler(pass_test_callback.filter(action='cancel'))
async def cancel_state(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()


@dp.callback_query_handler(options_keyboard_callback.filter(), state=PassTestMessage.ListTest)
@dp.callback_query_handler(pass_test_callback.filter(action='start_test'), state=PassTestMessage.ListTest)
async def start_test(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    call_answer = call.data.split(':')[1]

    async with state.proxy() as data:

        test_list = data.get('test_list')
        answer = data.get('answer')
        user_points = data.get('user_points')
        answer_points = data.get('answer_points')

        if call_answer == answer:
            user_points += int(answer_points)

    try:
        aleatorius_index = random.randint(0, len(test_list) - 1)
        aleatorius_elementum = test_list.pop(aleatorius_index)
        answer_points = aleatorius_elementum['points']

        options_list = [chr(ord('a') + aleatorius_elementum['options'].index(i)) + ') ' + i for i in
                        aleatorius_elementum['options']]
        answer = [i[0] for i in options_list if '*' in i][0]

        options_list = [i.rstrip('*') for i in options_list]

        await state.update_data(test_list=test_list, answer=answer, answer_points=answer_points,
                                user_points=user_points)

        options = '\n\n'.join(options_list)
        await call.message.answer(f"{aleatorius_elementum['question']}\n\n{options}",
                                  reply_markup=options_keyboard(aleatorius_elementum['options']))
        logging.info(
            call.from_user.full_name + f"\n–±–∞–ª –∑–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:{aleatorius_elementum['points']}\n–ù–∞–±—Ä–∞–Ω—ñ –±–∞–ª–∏:{user_points}")

    except ValueError:
        await state.finish()
        await call.message.answer(f"–í–ê–® –†–ï–ó–£–õ–¨–¢–ê–¢: {user_points} –∑ 40 –º–æ–∂–ª–∏—Ö \n\n–ü–†–û–•–Ü–î–ù–ò–ô –±–∞–ª: 34")
        await dp.bot.send_message(chat_id=ADMINS, text=f'{call.from_user.full_name}\n–ù–∞–±—Ä–∞–Ω–∏—Ö –±–∞–ª—ñ–≤:{user_points} ', )
