import asyncio
import logging

from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.default.main_button import main_button
from keyboards.inline.fix_buttons import fix_keyboard, fix_callback
from loader import dp, db_user, bot
from states.fix_state import FixMessage, CalcMessage

from utils.misc import rate_limit
from utils.misc.reset_fsm_state import set_reset_timer

"""–ú–ï–ù–Æ –ö–ù–û–ü–û–ö"""

"""–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö"""


@rate_limit(5, "–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö üî•")
@dp.message_handler(text="–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö üî•")
async def calculate_burns(message: types.Message, state: FSMContext):
    name = message.from_user.get_mention()
    user_id = message.from_user.id
    users = db_user.buf_user_data
    if user_id in users:
        logging.info(f"{message.from_user.full_name} -> —É–∂–µ –µ—Å—Ç—å –ë–î_S")
    else:
        try:
            db_user.add_user(user_id, name)
            db_user.unload_user_data()
            logging.info(f"{message.from_user.full_name} -> –∑–∞–ø–∏—Å–∞–Ω–∏ –≤ –ë–î")
        except Exception as e:
            print(e)

    await message.answer("üö©–í–≤–µ–¥—ñ—Ç—å <u>–í–ê–ì–£</u> –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)",reply_markup=main_button)
    await FixMessage.EnterWeight.set()
    logging.info(message.from_user.full_name + " -> pressed [–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö üî•]")
    await set_reset_timer(user_id=message.from_user.id, state=state, timeout_seconds=90)


@dp.message_handler(state=FixMessage.EnterWeight)
async def enter_weight(message: types.Message, state: FSMContext):
    if message.text.strip().isdigit():
        await state.update_data(weight=message.text, mention=message.from_user.get_mention())
        await message.answer(f'üö©–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å <u>–û–ü–Ü–ö–Ü–í</u> —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)')
        await FixMessage.next()

    else:
        await state.update_data(weight=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>–í–ê–ì–£</u> –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)',
            reply_markup=fix_keyboard)


@dp.message_handler(state=FixMessage.EnterBurns)
async def enter_weight(message: types.Message, state: FSMContext):
    await state.update_data(burns=message.text, mention=message.from_user.get_mention())
    if message.text.strip().isdigit():
        async with state.proxy() as data:
            weight = int(data.get('weight'))
            burns = int(data.get('burns'))
            await state.finish()
        round_weight = round(weight / 10) * 10
        round_burns = round(burns / 10) * 10
        if weight > 80:
            mill_per_hour = round_burns * 10 + (round_weight - 80) * 10
            drops_per_second = (mill_per_hour / 3600) * 20
            await message.answer(
                f"–í–ê–ì–ê ‚âà {round_weight}–∫–≥\n–û–ü–Ü–ö–ò ‚âà {round_burns}%\n–û–ë'–Ñ–ú = {mill_per_hour} –º–ª/–≥–æ–¥\n<u>–®–í–ò–î–ö–Ü–°–¢–¨ –í–õ–ò–í–ê–ù–ù–Ø ‚âà {drops_per_second:.2f} –∫—Ä–∞–ø–µ–ª—å/—Å–µ–∫—É–Ω–¥—É</u>")
        else:
            mill_per_hour = round_burns * 10
            drops_per_second = (mill_per_hour / 3600) * 20
            await message.answer(
                f"–í–ê–ì–ê ‚âà {round_weight}–∫–≥\n–û–ü–Ü–ö–ò ‚âà {round_burns}%\n–û–ë'–Ñ–ú = {mill_per_hour} –º–ª/–≥–æ–¥\n<u>–®–í–ò–î–ö–Ü–°–¢–¨ –í–õ–ò–í–ê–ù–ù–Ø ‚âà {drops_per_second:.2f} –∫—Ä–∞–ø–µ–ª—å/—Å–µ–∫—É–Ω–¥—É</u>")


    else:
        await state.update_data(text_answer=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å <u>–û–ü–Ü–ö–Ü–í</u> —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)',
            reply_markup=fix_keyboard)


@dp.callback_query_handler(fix_callback.filter(action='cancel'), state=FixMessage.EnterWeight)
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state=FixMessage.EnterBurns)
async def cancel_state(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()

    await call.answer("üóë–î–∞–Ω—ñ –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ!", show_alert=True)


"""–®–ø–∞—Ä–≥–∞–ª–∫–∞"""


@rate_limit(5, "–®–ø–∞—Ä–≥–∞–ª–∫–∞ üìã")
@dp.message_handler(text="–®–ø–∞—Ä–≥–∞–ª–∫–∞ üìã")
async def calculate_burns(message: types.Message):
    name = message.from_user.get_mention()
    user_id = message.from_user.id
    users = db_user.buf_user_data
    if user_id in users:
        logging.info(f"{message.from_user.full_name} -> —É–∂–µ –µ—Å—Ç—å –ë–î_S")
    else:
        try:
            db_user.add_user(user_id, name)
            db_user.unload_user_data()
            logging.info(f"{message.from_user.full_name} -> –∑–∞–ø–∏—Å–∞–Ω–∏ –≤ –ë–î")

        except Exception as e:
            print(e)


    await message.answer_document(open("data/–ø—Ä–µ–ø–∞—Ä–∞—Ç–∏.pdf", "rb"), reply_markup=main_button)

    logging.info(message.from_user.full_name + " -> pressed [–®–ø–∞—Ä–≥–∞–ª–∫–∞ üìã]")


"""–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ%"""


@rate_limit(5, "–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ%")
@dp.message_handler(text="–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ%")
async def calculate_drug(message: types.Message, state: FSMContext):
    name = message.from_user.get_mention()
    user_id = message.from_user.id
    users = db_user.buf_user_data
    if user_id in users:
        logging.info(f"{message.from_user.full_name} -> —É–∂–µ –µ—Å—Ç—å –ë–î_S")
    else:
        try:
            db_user.add_user(user_id, name)
            db_user.unload_user_data()
            logging.info(f"{message.from_user.full_name} -> –∑–∞–ø–∏—Å–∞–Ω–∏ –≤ –ë–î")

        except Exception as e:
            print(e)

    await message.answer(
        "‚òù –î–∞–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–µ –¥–ª—è –≤—Å—ñ—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤, –≤–º—ñ—Å—Ç <u>–ö–∞–ª—å—Ü–∏—è –≥–ª—é–∫–æ–Ω–∞—Ç</u> –æ–±—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è –ø–æ —ñ–Ω—à–æ–º—É!\n"
        "–ê–∫—Ç—É–∞–ª—å–Ω–æ: <u>–ö–µ—Ç–∞–º—ñ–Ω, –ù–∞–ª–æ–∫—Å–æ–Ω, –û–Ω–¥–∞–Ω—Å–µ—Ç—Ä–æ–Ω, –ö–∞–ª—å—Ü—ñ—è —Ö–ª–æ—Ä–∏–¥, –¢–•–ê</u>", reply_markup=main_button)
    await message.answer("üö©–í–≤–µ–¥—ñ—Ç—å <u>%</u>-–≤—ñ—Å—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç—É\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)")
    await CalcMessage.EnterPercent.set()
    logging.info(message.from_user.full_name + " -> pressed [–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ%]")


@dp.message_handler(state=CalcMessage.EnterPercent)
async def enter_weight_drug(message: types.Message, state: FSMContext):
    try:
        float_persent = float(message.text.strip())
        await state.update_data(percent=float_persent, mention=message.from_user.get_mention())
        await message.answer(
            f'üö©–í–≤–µ–¥—ñ—Ç—å  <u>–¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –≤ –º–≥</u> —è–∫—É –ø–æ—Ç—Ä—ñ–±–≥–æ –≤–≤–µ—Å—Ç–∏\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)1–≥-1000–º–≥')
        await CalcMessage.next()
    except ValueError:
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>%</u> –ø—Ä–µ–ø–∞—Ä–∞—Ç—É\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó)',
            reply_markup=fix_keyboard)


@dp.message_handler(state=CalcMessage.EnterWight)
async def enter_weight(message: types.Message, state: FSMContext):
    await state.update_data(wight=message.text, mention=message.from_user.get_mention())
    try:
        async with state.proxy() as data:
            percent = float(data.get('percent'))
            wight = float(data.get('wight'))
            await state.finish()
        mg_ml = percent * 1000 / 100
        enter_ml = wight / mg_ml
        await message.answer(f"–î–æ–∑–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –≤ –æ–±—î–º—ñ: {enter_ml} ml")

    except ValueError:
        await state.update_data(text_answer=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å  <u>–¥–æ–∑—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É –≤ –º–≥</u> —è–∫—É –ø–æ—Ç—Ä—ñ–±–≥–æ –≤–≤–µ—Å—Ç–∏\n(–º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ –∞–±–æ —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ <u>–∫—Ä–∞–ø–∫—É</u>‚ùó) 1–≥-1000–º–≥',
            reply_markup=fix_keyboard)


@dp.callback_query_handler(fix_callback.filter(action='cancel'), state=CalcMessage.EnterPercent)
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state=CalcMessage.EnterPercent)
async def cancel_state(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()

    await call.answer("üóë–î–∞–Ω—ñ –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ!", show_alert=True)
