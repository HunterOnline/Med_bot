import asyncio
import logging

from aiogram import types
from aiogram.dispatcher import FSMContext

from keyboards.inline.fix_buttons import fix_keyboard, fix_callback
from loader import dp
from states.fix_state import FixMessage, CalcMessage

from utils.misc import rate_limit
from utils.misc.reset_fsm_state import set_reset_timer

"""–ú–ï–ù–Æ –ö–ù–û–ü–û–ö"""


"""–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö"""


@rate_limit(5, "–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö üî•")
@dp.message_handler(text="–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö üî•")
async def calculate_burns(message: types.Message, state: FSMContext):
    await message.answer("üö©–í–≤–µ–¥—ñ—Ç—å <u>–í–ê–ì–£</u> –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)")
    await FixMessage.EnterWeight.set()
    logging.info(message.from_user.full_name + " -> pressed [–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö üî•]")
    await set_reset_timer(user_id=message.from_user.id, state=state, timeout_seconds=90)




@dp.message_handler(state=FixMessage.EnterWeight)
async def enter_weight(message: types.Message, state: FSMContext):

    if message.text.strip().isdigit():
        await state.update_data(weight=message.text, mention=message.from_user.get_mention())
        await message.answer(f'üö©–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å <u>–û–ü–Ü–ö–Ü–í</u> —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)')
        await FixMessage.next()

    else:
        await state.update_data(weight=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>–í–ê–ì–£</u> –≤ –∫—ñ–ª–æ–≥—Ä–∞–º–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)',
            reply_markup=fix_keyboard)


@dp.message_handler(state=FixMessage.EnterBurns)
async def enter_weight(message: types.Message, state: FSMContext):
    await state.update_data(burns=message.text, mention=message.from_user.get_mention())
    if message.text.strip().isdigit():
        async with state.proxy() as data:
            weight = int(data.get('weight'))
            burns = int(data.get('burns'))
            await state.finish()
        round_weight = round(weight / 10) * 10
        round_burns = round(burns / 10) * 10
        if weight > 80:
            mill_per_hour = round_burns * 10 + (round_weight - 80) * 10
            drops_per_second = (mill_per_hour / 3600) * 20
            await message.answer(
                f"–í–ê–ì–ê ‚âà {round_weight}–∫–≥\n–û–ü–Ü–ö–ò ‚âà {round_burns}%\n–û–ë'–Ñ–ú = {mill_per_hour} –º–ª/–≥–æ–¥\n<u>–®–í–ò–î–ö–Ü–°–¢–¨ –í–õ–ò–í–ê–ù–ù–Ø ‚âà {drops_per_second:.2f} –∫—Ä–∞–ø–µ–ª—å/—Å–µ–∫—É–Ω–¥—É</u>")
        else:
            mill_per_hour = round_burns * 10
            drops_per_second = (mill_per_hour / 3600) * 20
            await message.answer(
                f"–í–ê–ì–ê ‚âà {round_weight}–∫–≥\n–û–ü–Ü–ö–ò ‚âà {round_burns}%\n–û–ë'–Ñ–ú = {mill_per_hour} –º–ª/–≥–æ–¥\n<u>–®–í–ò–î–ö–Ü–°–¢–¨ –í–õ–ò–í–ê–ù–ù–Ø ‚âà {drops_per_second:.2f} –∫—Ä–∞–ø–µ–ª—å/—Å–µ–∫—É–Ω–¥—É</u>")


    else:
        await state.update_data(text_answer=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å <u>–û–ü–Ü–ö–Ü–í</u> —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)',
            reply_markup=fix_keyboard)


@dp.callback_query_handler(fix_callback.filter(action='cancel'), state=FixMessage.EnterWeight)
@dp.callback_query_handler(fix_callback.filter(action='cancel'), state=FixMessage.EnterBurns)
async def cancel_state(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await state.finish()

    await call.answer("üóë–î–∞–Ω—ñ –∞–Ω—É–ª—å–æ–≤–∞–Ω–æ!", show_alert=True)


"""–®–ø–∞—Ä–≥–∞–ª–∫–∞"""


@rate_limit(5, "–®–ø–∞—Ä–≥–∞–ª–∫–∞ üìã")
@dp.message_handler(text="–®–ø–∞—Ä–≥–∞–ª–∫–∞ üìã")
async def calculate_burns(message: types.Message):
    await message.answer_document(open("data/–ø—Ä–µ–ø–∞—Ä–∞—Ç–∏.pdf","rb"))

    logging.info(message.from_user.full_name + " -> pressed [–®–ø–∞—Ä–≥–∞–ª–∫–∞ üìã]")



"""–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ%"""


@rate_limit(5, "–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ%")
@dp.message_handler(text="–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ%")
async def calculate_drug(message: types.Message, state: FSMContext):
    await message.answer("üö©–í–≤–µ–¥—ñ—Ç—å <u>%</u> –ø—Ä–µ–ø–∞—Ä–∞—Ç—É\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)")
    await CalcMessage.EnterPercent.set()
    logging.info(message.from_user.full_name + " -> pressed [–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–∏ –æ–ø—ñ–∫–∞—Ö üî•]")
    await set_reset_timer(user_id=message.from_user.id, state=state, timeout_seconds=60)

    logging.info(message.from_user.full_name + " -> pressed [–†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ñ–≤ üíâ%]")



@dp.message_handler(state=CalcMessage.EnterPercent)
async def enter_weight_drug(message: types.Message, state: FSMContext):

    if message.text.strip().isdigit():
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(f'üö©–í–≤–µ–¥—ñ—Ç—å  <u>–º–∞—Å—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É</u>/–º–≥ —è–∫—É –ø–æ—Ç—Ä—ñ–±–≥–æ –≤–≤–µ—Å—Ç–∏\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)')
        await CalcMessage.next()

    else:
        await state.update_data(percent=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å <u>%</u> –ø—Ä–µ–ø–∞—Ä–∞—Ç—É\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)',
            reply_markup=fix_keyboard)


@dp.message_handler(state=CalcMessage.EnterWight)
async def enter_weight(message: types.Message, state: FSMContext):
    await state.update_data(wight=message.text, mention=message.from_user.get_mention())
    if message.text.strip().isdigit():
        async with state.proxy() as data:
            percent = int(data.get('percent'))
            weight = int(data.get('weight'))
            await state.finish()
        mg_ml = percent*1000/100   
    else:
        await state.update_data(text_answer=message.text, mention=message.from_user.get_mention())
        await message.answer(
            f'‚õî–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è!\n–°–ø—Ä–æ–±—É–π —â–µ, –≤–≤–µ–¥—ñ—Ç—å  <u>–º–∞—Å—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É</u>/–º–≥ —è–∫—É –ø–æ—Ç—Ä—ñ–±–≥–æ –≤–≤–µ—Å—Ç–∏\n(–º–∞—î –±—É—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ‚ùó)',
            reply_markup=fix_keyboard)

